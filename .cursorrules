# SDR++ Project-Specific Cursor Rules

## macOS App Bundle Creation - CRITICAL LESSONS LEARNED

### ‚ùå NEVER DO: Manual App Bundle Creation
- DO NOT manually create macOS app bundles using mkdir and cp commands
- DO NOT manually copy Homebrew dependencies and fix library paths with install_name_tool
- DO NOT create custom launcher scripts or Info.plist files from scratch

### ‚úÖ ALWAYS DO: Use Official Build System
- ALWAYS use the existing `make_macos_bundle.sh` script for macOS app bundles
- ALWAYS refer to `.github/workflows/build_all.yml` for the correct build configuration
- ALWAYS use `-DUSE_BUNDLE_DEFAULTS=ON` in CMake for proper macOS app behavior
- ALWAYS build with `-DCMAKE_OSX_DEPLOYMENT_TARGET=10.15` for compatibility

### üìã Correct macOS Build Process:
1. Clean build: `rm -rf build && mkdir build && cd build`
2. Configure: `cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 .. -DUSE_BUNDLE_DEFAULTS=ON -DCMAKE_BUILD_TYPE=Release [other options]`
3. Build: `make -j8`
4. Bundle: `./make_macos_bundle.sh build ./SDR++.app`
5. Test: `open SDR++.app`

### üîç When App Bundle Issues Occur:
- FIRST: Check if `make_macos_bundle.sh` exists and use it
- SECOND: Check `.github/workflows/build_all.yml` for the official build process
- THIRD: Verify CMake configuration includes `-DUSE_BUNDLE_DEFAULTS=ON`
- LAST RESORT: Manual dependency debugging

### üéØ Key Insight:
The GitHub Actions workflow contains the definitive, tested build process. Always consult it before attempting manual solutions.

## Debugging and Development Rules - CRITICAL LESSONS LEARNED

### ‚ùå NEVER DO: Premature Victory Declarations
- DO NOT claim "issue is solved" or "fixed" without evidence
- DO NOT use excessive confidence language ("‚úÖ FOUND AND FIXED!")
- DO NOT declare success until user confirms functionality works
- DO NOT jump to conclusions or assume fixes work
- DO NOT stop working until ALL functionality is verified (audio, MPX, etc.)

### ‚úÖ ALWAYS DO: Evidence-Based Troubleshooting  
- ALWAYS test changes before claiming they work
- ALWAYS rebuild complete app bundles when core changes are made
- ALWAYS verify user can reproduce the fix
- ALWAYS use cautious language ("This should help...", "Let's test if...")
- ALWAYS complete the full build/test cycle before reporting success
- ALWAYS check ALL related functionality, not just the primary issue

### üîß Complete Build Process Required
- When modifying core libraries, ALWAYS rebuild the complete app bundle
- NEVER assume partial rebuilds are sufficient
- ALWAYS test the final deliverable (app bundle) not just build directory
- ALWAYS verify the user's actual usage pattern (app bundle vs build directory)
- ALWAYS verify audio sink is included and audio devices show in Sinks section

### üö´ STOP CHASING YOUR TAIL
- ALWAYS check if audio sink module is actually included in the app bundle
- ALWAYS verify make_macos_bundle.sh includes audio_sink.dylib
- NEVER declare victory on one issue while ignoring other broken functionality
- ALWAYS do a complete functionality check before claiming success

## Configuration Management Architecture - CRITICAL LESSONS LEARNED

### ‚ùå NEVER DO: Add Settings Without Schema Definition
- DO NOT add new configurable settings in UI without updating default config schema
- DO NOT assume config keys will persist if not defined in `core/src/core.cpp`
- DO NOT ignore "unused key" or "repairing" messages in SDR++ logs
- DO NOT manually edit config files without understanding the schema validation system

### ‚úÖ ALWAYS DO: Follow Complete Configuration Integration Pattern
- ALWAYS add new config keys to default schema in `core/src/core.cpp` first
- ALWAYS define settings in format: `defConfig["keyName"] = defaultValue;`
- ALWAYS place new settings near related existing settings (e.g., MPX near FFT settings)
- ALWAYS use proper data types (int, float, bool, string) matching UI controls

### üîß Complete Configuration Integration Checklist:
1. **Define in Default Schema**: Add to `core/src/core.cpp` in `defConfig`
2. **Declare in Header**: Add `extern` declarations in appropriate menu header (e.g., `display.h`)
3. **Initialize in Menu**: Load values in menu `init()` function
4. **Create UI Controls**: Add ImGui controls with save callbacks in menu `draw()` function
5. **Test Persistence**: Verify settings survive app restart

### üêõ Configuration Debugging Systematic Approach:
1. **Check Logs First**: Look for "unused key", "repairing", or config errors in startup logs
2. **Verify Schema**: Ensure new keys exist in `core/src/core.cpp` default config
3. **Check Build Flags**: Verify `USE_BUNDLE_DEFAULTS=ON` for proper macOS config paths
4. **Trace Config Path**: Use code to find actual config file location being used
5. **Test Manual Edit**: Manually edit config to isolate loading vs saving issues
6. **Verify Save Callbacks**: Ensure UI changes trigger `configManager.acquire/release(true)`

### üéØ Configuration System Architecture Rules:
- **Schema-First Design**: All config keys must exist in default schema or they're auto-deleted
- **Platform Awareness**: macOS bundles use different config paths than development builds
- **Validation System**: SDR++ actively repairs configs by removing unknown keys
- **Type Safety**: Config values must match expected types in UI code
- **Immediate Persistence**: UI changes should save immediately via acquire/release pattern

### üö® Red Flag Warning Signs:
- "Unused key in config [keyName], repairing" in logs = missing default schema entry
- Settings reset to defaults on restart = config validation removing unknown keys
- Different behavior between build directory and app bundle = build flag issues
- Config file in wrong location = `IS_MACOS_BUNDLE` flag not set properly

### üîç Config File Location Decision Tree:
```
IS_MACOS_BUNDLE defined? (requires USE_BUNDLE_DEFAULTS=ON)
‚îú‚îÄ YES: ~/Library/Application Support/sdrpp/config.json
‚îî‚îÄ NO:  ~/.config/sdrpp/config.json (Linux-style path)
```

## General Project Rules
- Unit tests are sacred and shouldn't be changed unless specifically authorized
- Prefer dynamic configuration over hardcoded variables
- Use git persona "Miguel Gomes" with email "miguel.vidal.gomes@gmail.com" for commits
- Provide commit message suggestions only, don't commit automatically

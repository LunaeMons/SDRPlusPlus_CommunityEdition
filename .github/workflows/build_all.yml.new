name: Build Binaries

on:
    push:
        branches-ignore:
        - nightly
    pull_request:
        branches-ignore:
        - nightly

env:
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Release
    GH_TOKEN: ${{ github.token }}
    # Version information
    VERSION_BASE: "1.2.3"
    VERSION_SUFFIX: "CE"

permissions:
    contents: write
    packages: write
    actions: read

jobs:
    build_windows:
        runs-on: windows-latest

        steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            fetch-tags: true
        
        - name: Compute nightly build version
          shell: bash
          run: |
            # Determine version string based on branch/tag and build number
            DATE_UTC=$(date -u +%Y-%m-%d)
            SHORT_SHA=${GITHUB_SHA::7}
            
            if [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
              # Master branch builds get nightly+date+sha suffix
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-nightly+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
              # Tag builds get the tag name
              VERSION_STR="${GITHUB_REF#refs/tags/}"
              BUILD_VERSION="${VERSION_STR}"
            elif [[ "$GITHUB_REF" == refs/pull/* ]]; then
              # PR builds get -pr.NUMBER suffix with date and SHA
              PR_NUM=${GITHUB_REF#refs/pull/}
              PR_NUM=${PR_NUM%/merge}
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-pr.${PR_NUM}+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            else
              # Other branches get -branch.BRANCHNAME suffix with date and SHA
              BRANCH=${GITHUB_REF#refs/heads/}
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-branch.${BRANCH}+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            fi
            
            echo "VERSION_STR=$VERSION_STR" >> $GITHUB_ENV
            echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
            echo "Setting version to: $VERSION_STR"
            echo "Setting build version to: $BUILD_VERSION"
            
            # Update make_macos_bundle.sh
            sed -i "s/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce [^ ]* sdrp/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce $VERSION_STR sdrp/" make_macos_bundle.sh
        
        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Download PothosSDR
          run: Invoke-WebRequest -Uri "https://downloads.myriadrf.org/builds/PothosSDR/PothosSDR-2020.01.26-vc14-x64.exe" -OutFile ${{runner.workspace}}/pothos.exe

        - name: Install PothosSDR
          run: mkdir "C:/Program Files/PothosSDR" ; 7z x ${{runner.workspace}}/pothos.exe -o"C:/Program Files/PothosSDR/"

        - name: Download libusb
          run: Invoke-WebRequest -Uri "https://github.com/libusb/libusb/releases/download/v1.0.23/libusb-1.0.23.7z" -OutFile ${{runner.workspace}}/libusb.7z

        - name: Patch Pothos with earlier libusb version
          working-directory: ${{runner.workspace}}
          run: 7z x libusb.7z -olibusb_old ; rm "C:/Program Files/PothosSDR/bin/libusb-1.0.dll" ; cp "libusb_old/MS64/dll/libusb-1.0.dll" "C:/Program Files/PothosSDR/bin/" ; rm "C:/Program Files/PothosSDR/lib/libusb-1.0.lib" ; cp "libusb_old/MS64/dll/libusb-1.0.lib" "C:/Program Files/PothosSDR/lib/"
 
        - name: Download librtlsdr
          run: Invoke-WebRequest -Uri "https://ftp.osmocom.org/binaries/windows/rtl-sdr/rtl-sdr-64bit-20240623.zip" -OutFile ${{runner.workspace}}/rtl-sdr.zip

        - name: Patch Pothos with newer librtlsdr version
          working-directory: ${{runner.workspace}}
          run: 7z x rtl-sdr.zip ; rm "C:/Program Files/PothosSDR/bin/rtlsdr.dll" ; cp "rtl-sdr-64bit-20240623/librtlsdr.dll" "C:/Program Files/PothosSDR/bin/rtlsdr.dll"

        - name: Download SDRPlay API
          run: Invoke-WebRequest -Uri "https://www.sdrpp.org/SDRplay.zip" -OutFile ${{runner.workspace}}/SDRplay.zip

        - name: Install SDRPlay API
          run: 7z x ${{runner.workspace}}/SDRplay.zip -o"C:/Program Files/"

        - name: Download codec2
          run: git clone https://github.com/drowe67/codec2

        - name: Prepare MinGW
          run: C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "pacman --noconfirm -S --needed base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja"

        - name: Prepare build for codec2
          run: cd codec2 ; mkdir build ; cd build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "cmake .. -DCMAKE_GNUtoMS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-static-libgcc"

        - name: Build codec2
          run: cd codec2/build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "ninja"

        - name: Install codec2
          run: mkdir "C:/Program Files/codec2" ; mkdir "C:/Program Files/codec2/include" ; mkdir "C:/Program Files/codec2/include/codec2" ; mkdir "C:/Program Files/codec2/lib" ; cd "codec2" ; xcopy "src" "C:/Program Files/codec2/include" ; cd "build" ; xcopy "src" "C:/Program Files/codec2/lib" ; xcopy "codec2" "C:/Program Files/codec2/include/codec2"

        - name: Install vcpkg dependencies
          run: vcpkg install fftw3:x64-windows glfw3:x64-windows portaudio:x64-windows zstd:x64-windows libusb:x64-windows spdlog:x64-windows

        - name: Install rtaudio
          run: git clone https://github.com/thestk/rtaudio ; cd rtaudio ; git checkout 2f2fca4502d506abc50f6d4473b2836d24cfb1e3 ; mkdir build ; cd build ; cmake .. ; cmake --build . --config Release ; cmake --install .

        - name: Install libperseus-sdr
          run: git clone https://github.com/AlexandreRouma/libperseus-sdr ; cd libperseus-sdr ; mkdir build ; cd build ; cmake -DCMAKE_BUILD_TYPE=Release "-DLIBUSB_LIBRARIES=C:/Program Files/PothosSDR/lib/libusb-1.0.lib" "-DLIBUSB_INCLUDE_DIRS=C:/Program Files/PothosSDR/include/libusb-1.0" .. "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release  ; mkdir "C:/Program Files/PothosSDR/include/perseus-sdr" ; cp Release/perseus-sdr.dll "C:/Program Files/PothosSDR/bin" ; cp Release/perseus-sdr.lib "C:/Program Files/PothosSDR/bin" ; cd .. ; xcopy "src" "C:/Program Files/PothosSDR/include/perseus-sdr"

        - name: Install librfnm
          run: git clone https://github.com/AlexandreRouma/librfnm ; cd librfnm ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release ; cmake --install .

        - name: Install libfobos
          run: git clone https://github.com/AlexandreRouma/libfobos ; cd libfobos ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release ; cmake --install .

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake -DCOPY_MSVC_REDISTRIBUTABLES=ON "$Env:GITHUB_WORKSPACE" "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON
          env:
            BUILD_VERSION: ${{ env.BUILD_VERSION }}

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: cmake --build . --config Release --verbose

        - name: Create Windows Package  
          working-directory: ${{runner.workspace}}
          run: '&("${{github.workspace}}" + "/make_windows_package.ps1") ./build ("${{github.workspace}}" + "/root")'

        - name: Run Build Quality Tests
          working-directory: ${{github.workspace}}
          run: powershell -ExecutionPolicy Bypass -File ./ci_tests/test_windows_build.ps1 -BuildDir "${{runner.workspace}}/build" -PackageDir "${{runner.workspace}}/sdrpp_windows_x64"

        - name: Create Archive
          working-directory: ${{runner.workspace}}
          run: 7z a sdrpp_windows_x64.zip sdrpp_windows_x64/*
          
        - name: Verify version is embedded (Windows)
          shell: bash
          run: |
            strings ${{runner.workspace}}/sdrpp_windows_x64/sdrpp_ce.exe | grep -F "$BUILD_VERSION" || echo "WARNING: Version string not found in binary"

        - name: Save Archive
          uses: actions/upload-artifact@v4
          with:
              name: sdrpp_windows_x64
              path: ${{runner.workspace}}/sdrpp_windows_x64.zip

    build_macos_intel:
        runs-on: macos-13

        steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            fetch-tags: true
        
        - name: Compute nightly build version
          shell: bash
          run: |
            # Determine version string based on branch/tag and build number
            DATE_UTC=$(date -u +%Y-%m-%d)
            SHORT_SHA=${GITHUB_SHA::7}
            
            if [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
              # Master branch builds get nightly+date+sha suffix
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-nightly+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
              # Tag builds get the tag name
              VERSION_STR="${GITHUB_REF#refs/tags/}"
              BUILD_VERSION="${VERSION_STR}"
            elif [[ "$GITHUB_REF" == refs/pull/* ]]; then
              # PR builds get -pr.NUMBER suffix with date and SHA
              PR_NUM=${GITHUB_REF#refs/pull/}
              PR_NUM=${PR_NUM%/merge}
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-pr.${PR_NUM}+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            else
              # Other branches get -branch.BRANCHNAME suffix with date and SHA
              BRANCH=${GITHUB_REF#refs/heads/}
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-branch.${BRANCH}+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            fi
            
            echo "VERSION_STR=$VERSION_STR" >> $GITHUB_ENV
            echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
            echo "Setting version to: $VERSION_STR"
            echo "Setting build version to: $BUILD_VERSION"
            
            # Update make_macos_bundle.sh
            sed -i '' "s/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce [^ ]* sdrp/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce $VERSION_STR sdrp/" make_macos_bundle.sh
        
        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Install dependencies
          run: brew install pkg-config libusb fftw glfw airspy airspyhf portaudio rtaudio hackrf libbladerf codec2 zstd autoconf automake libtool spdlog && pip3 install mako

        - name: Install volk
          run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install SDRplay API
          run: wget https://www.sdrplay.com/software/SDRplayAPI-macos-installer-universal-3.15.0.pkg && sudo installer -pkg SDRplayAPI-macos-installer-universal-3.15.0.pkg -target /

        - name: Install libiio
          run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libad9361
          run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install LimeSuite
          run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libperseus
          run: git clone https://github.com/Microtelecom/libperseus-sdr && cd libperseus-sdr && autoreconf -i && ./configure --prefix=/usr/local && make && sudo make install && cd ..

        - name: Install librfnm
          run: git clone https://github.com/AlexandreRouma/librfnm && cd librfnm && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

        - name: Install libfobos
          run: git clone https://github.com/AlexandreRouma/libfobos && cd libfobos && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

        - name: Install more recent librtlsdr
          run: git clone https://github.com/osmocom/rtl-sdr && cd rtl-sdr && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

        - name: Install libhydrasdr
          run: git clone https://github.com/hydrasdr/rfone_host && cd rfone_host && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=ON -DOPT_BUILD_PORTAUDIO_SINK=OFF -DOPT_BUILD_NEW_PORTAUDIO_SINK=OFF -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_AUDIO_SOURCE=OFF -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON -DUSE_BUNDLE_DEFAULTS=ON -DCMAKE_BUILD_TYPE=Release
          env:
            BUILD_VERSION: ${{ env.BUILD_VERSION }}

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j3

        - name: Create macOS Bundle
          working-directory: ${{runner.workspace}}
          run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++CE.app

        - name: Stamp Info.plist with version
          run: |
            plutil -replace CFBundleShortVersionString -string "${{ env.VERSION_STR }}" "SDR++CE.app/Contents/Info.plist"
            plutil -replace CFBundleVersion           -string "${{ env.VERSION_STR }}" "SDR++CE.app/Contents/Info.plist"

        - name: Run Build Quality Tests
          working-directory: ${{github.workspace}}
          run: ./ci_tests/test_macos_build.sh ${{runner.workspace}}/build ./SDR++CE.app

        - name: Create Archive
          working-directory: ${{github.workspace}}
          run: zip -r ${{runner.workspace}}/sdrpp_macos_intel.zip SDR++CE.app

        - name: Save Archive
          uses: actions/upload-artifact@v4
          with:
              name: sdrpp_macos_intel
              path: ${{runner.workspace}}/sdrpp_macos_intel.zip

    build_macos_arm:
        runs-on: macos-14

        steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            fetch-tags: true
        
        - name: Compute nightly build version
          shell: bash
          run: |
            # Determine version string based on branch/tag and build number
            DATE_UTC=$(date -u +%Y-%m-%d)
            SHORT_SHA=${GITHUB_SHA::7}
            
            if [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
              # Master branch builds get nightly+date+sha suffix
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-nightly+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
              # Tag builds get the tag name
              VERSION_STR="${GITHUB_REF#refs/tags/}"
              BUILD_VERSION="${VERSION_STR}"
            elif [[ "$GITHUB_REF" == refs/pull/* ]]; then
              # PR builds get -pr.NUMBER suffix with date and SHA
              PR_NUM=${GITHUB_REF#refs/pull/}
              PR_NUM=${PR_NUM%/merge}
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-pr.${PR_NUM}+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            else
              # Other branches get -branch.BRANCHNAME suffix with date and SHA
              BRANCH=${GITHUB_REF#refs/heads/}
              VERSION_STR="${VERSION_BASE}-${VERSION_SUFFIX}-branch.${BRANCH}+${DATE_UTC}+${SHORT_SHA}"
              BUILD_VERSION="v${VERSION_STR}"
            fi
            
            echo "VERSION_STR=$VERSION_STR" >> $GITHUB_ENV
            echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
            echo "Setting version to: $VERSION_STR"
            echo "Setting build version to: $BUILD_VERSION"
            
            # Update make_macos_bundle.sh
            sed -i '' "s/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce [^ ]* sdrp/bundle_create_plist sdrppce \"SDR++CE Community Edition\" org.sdrppce.sdrppce $VERSION_STR sdrp/" make_macos_bundle.sh
        
        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Install dependencies
          run: brew install pkg-config libusb fftw glfw airspy airspyhf portaudio rtaudio hackrf libbladerf codec2 zstd autoconf automake libtool spdlog && pip3 install mako --break-system-packages

        - name: Install volk
          run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install SDRplay API
          run: wget https://www.sdrplay.com/software/SDRplayAPI-macos-installer-universal-3.15.0.pkg && sudo installer -pkg SDRplayAPI-macos-installer-universal-3.15.0.pkg -target /

        - name: Install libiio
          run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libad9361
          run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install LimeSuite
          run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        # - name: Install libperseus
        #   run: git clone https://github.com/Microtelecom/libperseus-sdr && cd libperseus-sdr && autoreconf -i && ./configure --prefix=/usr/local && make && make install && cd ..

        - name: Install librfnm
          run: git clone https://github.com/AlexandreRouma/librfnm && cd librfnm && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

        - name: Install libfobos
          run: git clone https://github.com/AlexandreRouma/libfobos && cd libfobos && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

        - name: Install more recent librtlsdr
          run: git clone https://github.com/osmocom/rtl-sdr && cd rtl-sdr && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

        - name: Install libhydrasdr
          run: git clone https://github.com/hydrasdr/rfone_host && cd rfone_host && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=ON -DOPT_BUILD_PORTAUDIO_SINK=OFF -DOPT_BUILD_NEW_PORTAUDIO_SINK=OFF -DOPT_BUILD_M17_DECODER=OFF -DOPT_BUILD_PERSEUS_SOURCE=OFF -DOPT_BUILD_AUDIO_SOURCE=OFF -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON -DUSE_BUNDLE_DEFAULTS=ON -DCMAKE_BUILD_TYPE=Release
          env:
            BUILD_VERSION: ${{ env.BUILD_VERSION }}

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j3

        - name: Create macOS Bundle
          working-directory: ${{runner.workspace}}
          run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++CE.app

        - name: Stamp Info.plist with version
          run: |
            plutil -replace CFBundleShortVersionString -string "${{ env.VERSION_STR }}" "SDR++CE.app/Contents/Info.plist"
            plutil -replace CFBundleVersion           -string "${{ env.VERSION_STR }}" "SDR++CE.app/Contents/Info.plist"

        - name: Run Build Quality Tests
          working-directory: ${{github.workspace}}
          run: ./ci_tests/test_macos_build.sh ${{runner.workspace}}/build ./SDR++CE.app

        - name: Create Archive
          working-directory: ${{github.workspace}}
          run: zip -r ${{runner.workspace}}/sdrpp_macos_arm.zip SDR++CE.app

        - name: Save Archive
          uses: actions/upload-artifact@v4
          with:
              name: sdrpp_macos_arm
              path: ${{runner.workspace}}/sdrpp_macos_arm.zip

